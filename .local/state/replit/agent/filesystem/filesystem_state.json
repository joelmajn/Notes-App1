{"file_contents":{"DEPLOYMENT.md":{"content":"# üöÄ Guia Completo de Deployment - NotesApp\n\nEste guia completo te ajudar√° a fazer deploy da aplica√ß√£o NotesApp seguindo o fluxo: **GitHub ‚Üí Vercel ‚Üí Xano Backend**.\n\n## üìã √çndice\n- [Pr√©-requisitos](#pr√©-requisitos)\n- [Etapa 1: GitHub](#etapa-1-github)\n- [Etapa 2: Vercel](#etapa-2-vercel)\n- [Etapa 3: Xano Backend](#etapa-3-xano-backend)\n- [Etapa 4: Extens√£o do Navegador](#etapa-4-extens√£o-do-navegador)\n- [Configura√ß√µes Finais](#configura√ß√µes-finais)\n- [Solu√ß√£o de Problemas](#solu√ß√£o-de-problemas)\n\n## Pr√©-requisitos\n\n### Contas Necess√°rias\n- [ ] Conta no [GitHub](https://github.com)\n- [ ] Conta no [Vercel](https://vercel.com)\n- [ ] Conta no [Xano](https://xano.com)\n\n### Ferramentas\n- [ ] Git instalado\n- [ ] Node.js 18+ instalado\n- [ ] Editor de c√≥digo (VS Code recomendado)\n\n## Etapa 1: GitHub\n\n### 1.1 Preparar o Reposit√≥rio\n\n```bash\n# 1. Inicializar reposit√≥rio Git\ngit init\n\n# 2. Adicionar arquivos\ngit add .\n\n# 3. Fazer commit inicial\ngit commit -m \"üéâ Initial commit - NotesApp Full Stack\"\n\n# 4. Conectar ao reposit√≥rio remoto\ngit remote add origin https://github.com/SEU-USUARIO/notesapp.git\n\n# 5. Push para GitHub\ngit branch -M main\ngit push -u origin main\n```\n\n### 1.2 Estrutura do Reposit√≥rio\nCertifique-se de que seu reposit√≥rio tenha esta estrutura:\n```\nnotesapp/\n‚îú‚îÄ‚îÄ client/          # Frontend React\n‚îú‚îÄ‚îÄ server/          # Backend Express\n‚îú‚îÄ‚îÄ shared/          # Schemas compartilhados\n‚îú‚îÄ‚îÄ extension/       # Extens√£o do navegador\n‚îú‚îÄ‚îÄ package.json     # Depend√™ncias\n‚îú‚îÄ‚îÄ vite.config.ts   # Configura√ß√£o Vite\n‚îú‚îÄ‚îÄ vercel.json      # Configura√ß√£o Vercel\n‚îî‚îÄ‚îÄ DEPLOYMENT.md    # Este guia\n```\n\n### 1.3 Criar vercel.json\n\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"server/index.ts\",\n      \"use\": \"@vercel/node\"\n    },\n    {\n      \"src\": \"client/**\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"client/dist\"\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/api/(.*)\",\n      \"dest\": \"/server/index.ts\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/client/dist/$1\"\n    }\n  ],\n  \"env\": {\n    \"NODE_ENV\": \"production\"\n  },\n  \"functions\": {\n    \"server/index.ts\": {\n      \"maxDuration\": 30\n    }\n  }\n}\n```\n\n## Etapa 2: Vercel\n\n### 2.1 Deploy Inicial\n\n1. **Conectar GitHub ao Vercel**\n   - Acesse [vercel.com](https://vercel.com)\n   - Clique em \"Import Project\"\n   - Selecione seu reposit√≥rio GitHub\n\n2. **Configurar o Projeto**\n   ```\n   Project Name: notesapp\n   Framework Preset: Other\n   Root Directory: ./\n   Build Command: npm run build\n   Output Directory: client/dist\n   Install Command: npm install\n   ```\n\n3. **Vari√°veis de Ambiente**\n   No dashboard do Vercel, v√° em Settings > Environment Variables:\n   ```\n   NODE_ENV=production\n   DATABASE_URL=postgresql://...\n   XANO_API_URL=https://sua-instancia.xano.io\n   XANO_API_KEY=sua-chave-api\n   ```\n\n### 2.2 Configurar Scripts de Build\n\nEdite o `package.json`:\n```json\n{\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"npm run build:client && npm run build:server\",\n    \"build:client\": \"cd client && npm run build\",\n    \"build:server\": \"tsc server/index.ts --outDir dist\",\n    \"start\": \"node server/index.js\",\n    \"vercel-build\": \"npm run build:client\"\n  }\n}\n```\n\n## Etapa 3: Xano Backend\n\n### 3.1 Criar Projeto no Xano\n\n1. **Configurar Database Schema**\n   ```sql\n   -- Tabela: categories\n   id: int (auto increment, primary key)\n   name: text\n   color: text\n   created_at: datetime (auto)\n   updated_at: datetime (auto)\n\n   -- Tabela: notes  \n   id: int (auto increment, primary key)\n   title: text\n   content: text\n   category_id: int (foreign key -> categories.id)\n   tags: json\n   checklist: json\n   reminder_date: datetime\n   reminder_repeat: text\n   is_favorite: boolean\n   is_archived: boolean\n   created_at: datetime (auto)\n   updated_at: datetime (auto)\n   ```\n\n2. **Criar API Endpoints**\n\n   **GET /api/notes**\n   ```javascript\n   // Buscar todas as notas\n   let notes = this.runSQL(`\n     SELECT * FROM notes \n     WHERE is_archived = false \n     ORDER BY updated_at DESC\n   `)\n   \n   return notes\n   ```\n\n   **POST /api/notes**\n   ```javascript\n   // Criar nova nota\n   let { title, content, category_id, tags, checklist, reminder_date, reminder_repeat } = request.body\n   \n   let result = this.runSQL(`\n     INSERT INTO notes (title, content, category_id, tags, checklist, reminder_date, reminder_repeat)\n     VALUES (?, ?, ?, ?, ?, ?, ?)\n   `, [title, content, category_id, JSON.stringify(tags), JSON.stringify(checklist), reminder_date, reminder_repeat])\n   \n   return { id: result.insertId, message: \"Note created successfully\" }\n   ```\n\n   **PUT /api/notes/:id**\n   ```javascript\n   // Atualizar nota\n   let noteId = request.params.id\n   let { title, content, category_id, tags, checklist, reminder_date, reminder_repeat, is_favorite, is_archived } = request.body\n   \n   this.runSQL(`\n     UPDATE notes \n     SET title=?, content=?, category_id=?, tags=?, checklist=?, reminder_date=?, reminder_repeat=?, is_favorite=?, is_archived=?, updated_at=NOW()\n     WHERE id=?\n   `, [title, content, category_id, JSON.stringify(tags), JSON.stringify(checklist), reminder_date, reminder_repeat, is_favorite, is_archived, noteId])\n   \n   return { message: \"Note updated successfully\" }\n   ```\n\n   **DELETE /api/notes/:id**\n   ```javascript\n   // Deletar nota\n   let noteId = request.params.id\n   \n   this.runSQL(`DELETE FROM notes WHERE id = ?`, [noteId])\n   \n   return { message: \"Note deleted successfully\" }\n   ```\n\n### 3.2 Configurar CORS\n\nNo Xano, configure CORS settings:\n```\nAllowed Origins: \n- https://seu-app.vercel.app\n- chrome-extension://*\n- moz-extension://*\n\nAllowed Methods: GET, POST, PUT, DELETE, OPTIONS\nAllowed Headers: Content-Type, Authorization, X-Requested-With\n```\n\n### 3.3 Atualizar Frontend para Xano\n\nModifique `client/src/lib/queryClient.ts`:\n```typescript\nconst API_BASE = import.meta.env.VITE_XANO_API_URL || 'https://sua-instancia.xano.io/api/v1';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const response = await fetch(`${API_BASE}${queryKey[0]}`, {\n          headers: {\n            'Authorization': `Bearer ${import.meta.env.VITE_XANO_API_KEY}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        \n        return response.json();\n      },\n    },\n  },\n});\n\nexport const apiRequest = async (url: string, options: RequestInit = {}) => {\n  const response = await fetch(`${API_BASE}${url}`, {\n    ...options,\n    headers: {\n      'Authorization': `Bearer ${import.meta.env.VITE_XANO_API_KEY}`,\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  });\n  \n  if (!response.ok) {\n    throw new Error('Request failed');\n  }\n  \n  return response.json();\n};\n```\n\n## Etapa 4: Extens√£o do Navegador\n\n### 4.1 Criar √çcones\n\nCrie √≠cones nas seguintes dimens√µes:\n- `extension/icons/icon16.png` (16x16px)\n- `extension/icons/icon32.png` (32x32px) \n- `extension/icons/icon48.png` (48x48px)\n- `extension/icons/icon128.png` (128x128px)\n\n### 4.2 Configurar URLs da API\n\nAtualize os arquivos da extens√£o substituindo `https://your-app-domain.vercel.app` pela URL real do seu app.\n\n### 4.3 Build da Extens√£o\n\n```bash\n# Criar pasta de build da extens√£o\nmkdir extension-build\n\n# Copiar arquivos necess√°rios\ncp -r extension/* extension-build/\n\n# Comprimir para upload\nzip -r notesapp-extension.zip extension-build/*\n```\n\n### 4.4 Publicar na Chrome Web Store\n\n1. Acesse [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole)\n2. Clique em \"Add new item\"\n3. Fa√ßa upload do arquivo `notesapp-extension.zip`\n4. Preencha as informa√ß√µes:\n   - Nome: \"NotesApp - Gerenciador de Notas\"\n   - Descri√ß√£o: \"Aplicativo completo de notas com categorias, tags, checklists e lembretes\"\n   - Categoria: \"Productivity\"\n   - Screenshots: Capturas da extens√£o funcionando\n\n## Configura√ß√µes Finais\n\n### 5.1 Configurar Dom√≠nio Customizado (Opcional)\n\nNo Vercel:\n1. V√° em Settings > Domains\n2. Adicione seu dom√≠nio personalizado\n3. Configure DNS:\n   ```\n   Type: CNAME\n   Name: www (ou @)\n   Value: alias.vercel.app\n   ```\n\n### 5.2 Configurar Analytics\n\nAdicione Google Analytics no `client/public/index.html`:\n```html\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', 'GA_MEASUREMENT_ID');\n</script>\n```\n\n### 5.3 Configurar PWA\n\nCertifique-se de que `client/public/manifest.json` est√° configurado:\n```json\n{\n  \"name\": \"NotesApp\",\n  \"short_name\": \"NotesApp\",\n  \"description\": \"Aplicativo completo de notas\",\n  \"theme_color\": \"#3b82f6\",\n  \"background_color\": \"#ffffff\",\n  \"display\": \"standalone\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"/icon-192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/icon-512.png\", \n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n```\n\n## Solu√ß√£o de Problemas\n\n### Build Errors\n```bash\n# Limpar cache e reinstalar depend√™ncias\nrm -rf node_modules package-lock.json\nnpm install\n\n# Verificar vers√µes\nnode --version  # Deve ser 18+\nnpm --version\n```\n\n### Problemas de CORS\n- Verificar se o Xano est√° configurado para aceitar requests do seu dom√≠nio\n- Adicionar headers CORS no servidor\n\n### Extens√£o n√£o funciona\n- Verificar se as URLs da API est√£o corretas\n- Testar em modo desenvolvedor primeiro\n- Verificar console do navegador para erros\n\n### Deploy falha no Vercel\n- Verificar se `vercel.json` est√° correto\n- Confirmar vari√°veis de ambiente\n- Ver logs de build no dashboard do Vercel\n\n## üéâ Parab√©ns!\n\nSeu NotesApp agora est√°:\n- ‚úÖ Hospedado no Vercel\n- ‚úÖ Conectado ao Xano como backend\n- ‚úÖ Dispon√≠vel como extens√£o do navegador\n- ‚úÖ Funcionando como PWA\n\n### Pr√≥ximos Passos\n- [ ] Monitorar m√©tricas de uso\n- [ ] Implementar backup autom√°tico \n- [ ] Adicionar recursos de colabora√ß√£o\n- [ ] Otimizar performance\n- [ ] Solicitar feedback dos usu√°rios\n\n---\n\n**Suporte**: Se tiver problemas, verifique a documenta√ß√£o oficial de cada plataforma ou abra uma issue no GitHub.","size_bytes":10444},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack notes application built with React, Express, TypeScript, and PostgreSQL. The application provides a comprehensive note-taking experience with categories, tags, checklists, reminders, and search functionality. It features a modern UI built with shadcn/ui components and Tailwind CSS, with both light and dark theme support. The app is designed to be responsive and includes Progressive Web App (PWA) capabilities with offline functionality.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Theme System**: Custom theme provider supporting light/dark/system modes\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **API Design**: RESTful API with comprehensive CRUD operations\n- **Data Storage**: In-memory storage implementation with interface for easy database migration\n- **Development Server**: Vite integration for hot module replacement in development\n\n## Database Schema\n- **Notes Table**: Core entity with title, content, category, tags, checklist, reminders, favorites, and archive functionality\n- **Categories Table**: Organizational system with colors for visual categorization\n- **Tags Table**: Flexible tagging system for cross-cutting note organization\n- **Relationships**: Notes reference categories via foreign key, tags stored as arrays\n\n## Key Features\n- **Note Management**: Full CRUD operations with rich text content\n- **Organization**: Category-based organization with color coding\n- **Tagging**: Flexible tag system for multi-dimensional organization\n- **Checklists**: JSON-based checklist items within notes\n- **Reminders**: Date-based reminders with repeat options\n- **Search**: Full-text search across note titles and content\n- **Favorites & Archive**: Special collections for important and archived notes\n- **Responsive Design**: Mobile-first design with dedicated mobile navigation\n- **PWA Support**: Service worker for offline functionality and app-like experience\n\n## Development Architecture\n- **Build System**: Vite for frontend bundling, esbuild for backend compilation\n- **Type Safety**: Shared TypeScript schemas between frontend and backend\n- **Development Setup**: Hot reload for both frontend and backend changes\n- **Error Handling**: Runtime error overlay and comprehensive error boundaries\n\n# External Dependencies\n\n## Core Runtime Dependencies\n- **@neondatabase/serverless**: PostgreSQL database client for Neon\n- **drizzle-orm**: Type-safe database ORM\n- **@tanstack/react-query**: Server state management\n- **react-hook-form**: Form handling with validation\n- **zod**: Schema validation and type inference\n- **date-fns**: Date manipulation and formatting\n\n## UI Component Dependencies\n- **@radix-ui/***: Headless UI primitives for accessibility\n- **class-variance-authority**: Component variant management\n- **clsx & tailwind-merge**: Conditional CSS class utilities\n- **cmdk**: Command palette component\n- **embla-carousel-react**: Carousel components\n\n## Development Dependencies\n- **vite**: Frontend build tool and development server\n- **typescript**: Type checking and compilation\n- **tailwindcss**: Utility-first CSS framework\n- **drizzle-kit**: Database migration and schema management tools\n\n## PWA Dependencies\n- Service worker for offline functionality\n- Web app manifest for app-like installation\n- Background sync capabilities for offline note operations\n\n## Database Integration\n- PostgreSQL as the primary database (configured for Neon)\n- Drizzle ORM for type-safe database operations\n- Connection pooling via DATABASE_URL environment variable\n- Migration system for schema updates","size_bytes":4098},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"extension/background.js":{"content":"// NotesApp Extension Background Script\n\n// Handle extension installation\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('NotesApp Extension installed');\n  \n  // Create context menu\n  chrome.contextMenus.create({\n    id: 'saveToNotesApp',\n    title: 'Salvar no NotesApp',\n    contexts: ['selection', 'page']\n  });\n});\n\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  if (info.menuItemId === 'saveToNotesApp') {\n    handleSaveToNotes(info, tab);\n  }\n});\n\n// Handle keyboard shortcuts\nchrome.commands.onCommand.addListener((command) => {\n  if (command === 'quick-note') {\n    chrome.action.openPopup();\n  }\n});\n\n// Handle messages from content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'saveNote') {\n    saveNoteToAPI(request.noteData);\n  }\n});\n\n// Save selected text or page info to notes\nasync function handleSaveToNotes(info, tab) {\n  let noteContent = '';\n  let noteTitle = '';\n  \n  if (info.selectionText) {\n    noteContent = info.selectionText;\n    noteTitle = `Texto de: ${tab.title}`;\n  } else {\n    noteTitle = tab.title;\n    noteContent = `Link: ${tab.url}\\n\\nSalvo de: ${tab.title}`;\n  }\n  \n  const noteData = {\n    title: noteTitle.length > 100 ? noteTitle.substring(0, 97) + '...' : noteTitle,\n    content: noteContent,\n    tags: ['web-clip'],\n    source_url: tab.url\n  };\n  \n  await saveNoteToAPI(noteData);\n}\n\n// Save note via API\nasync function saveNoteToAPI(noteData) {\n  try {\n    const response = await fetch('https://your-app-domain.vercel.app/api/notes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    \n    if (response.ok) {\n      // Show success notification\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/icon48.png',\n        title: 'NotesApp',\n        message: 'Nota salva com sucesso! üìù'\n      });\n    }\n  } catch (error) {\n    console.error('Error saving note:', error);\n    \n    // Show error notification\n    chrome.notifications.create({\n      type: 'basic',\n      iconUrl: 'icons/icon48.png',\n      title: 'NotesApp - Erro',\n      message: 'N√£o foi poss√≠vel salvar a nota. Tente novamente.'\n    });\n  }\n}\n\n// Handle alarms for reminders\nchrome.alarms.onAlarm.addListener((alarm) => {\n  if (alarm.name.startsWith('note-reminder-')) {\n    showReminderNotification(alarm.name);\n  }\n});\n\n// Show reminder notification\nfunction showReminderNotification(alarmName) {\n  const noteId = alarmName.replace('note-reminder-', '');\n  \n  chrome.notifications.create({\n    type: 'basic',\n    iconUrl: 'icons/icon48.png',\n    title: 'üîî Lembrete - NotesApp',\n    message: 'Voc√™ tem um lembrete de nota!',\n    buttons: [\n      { title: 'Ver Nota' },\n      { title: 'Dispensar' }\n    ]\n  });\n}\n\n// Handle notification clicks\nchrome.notifications.onButtonClicked.addListener((notificationId, buttonIndex) => {\n  if (buttonIndex === 0) { // \"Ver Nota\" button\n    chrome.tabs.create({\n      url: 'https://your-app-domain.vercel.app'\n    });\n  }\n  chrome.notifications.clear(notificationId);\n});","size_bytes":3164},"extension/content.css":{"content":"/* NotesApp Extension Content Styles */\n\n.notesapp-highlight {\n  background-color: #fef3c7 !important;\n  padding: 2px 4px !important;\n  border-radius: 3px !important;\n  border: 1px solid #f59e0b !important;\n}\n\n.notesapp-save-button {\n  position: fixed !important;\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8) !important;\n  color: white !important;\n  padding: 8px 16px !important;\n  border-radius: 8px !important;\n  font-size: 12px !important;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n  font-weight: 500 !important;\n  cursor: pointer !important;\n  z-index: 999999 !important;\n  box-shadow: 0 4px 20px rgba(59, 130, 246, 0.4) !important;\n  border: none !important;\n  transition: all 0.2s ease !important;\n  user-select: none !important;\n}\n\n.notesapp-save-button:hover {\n  transform: translateY(-2px) !important;\n  box-shadow: 0 6px 25px rgba(59, 130, 246, 0.5) !important;\n  background: linear-gradient(135deg, #2563eb, #1e40af) !important;\n}\n\n.notesapp-save-button:active {\n  transform: translateY(0) !important;\n}\n\n.notesapp-feedback {\n  position: fixed !important;\n  top: 20px !important;\n  right: 20px !important;\n  background: linear-gradient(135deg, #10b981, #059669) !important;\n  color: white !important;\n  padding: 12px 20px !important;\n  border-radius: 8px !important;\n  font-size: 14px !important;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n  font-weight: 500 !important;\n  z-index: 999999 !important;\n  box-shadow: 0 4px 20px rgba(16, 185, 129, 0.3) !important;\n  border: none !important;\n  animation: slideInRight 0.3s ease !important;\n}\n\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%) !important;\n    opacity: 0 !important;\n  }\n  to {\n    transform: translateX(0) !important;\n    opacity: 1 !important;\n  }\n}\n\n@keyframes slideOutRight {\n  from {\n    transform: translateX(0) !important;\n    opacity: 1 !important;\n  }\n  to {\n    transform: translateX(100%) !important;\n    opacity: 0 !important;\n  }\n}\n\n/* Prevent conflicts with existing styles */\n.notesapp-save-button * {\n  box-sizing: border-box !important;\n}\n\n.notesapp-feedback * {\n  box-sizing: border-box !important;\n}","size_bytes":2220},"extension/content.js":{"content":"// NotesApp Extension Content Script\n\n// Add floating save button for selected text\nlet saveButton = null;\n\n// Handle text selection\ndocument.addEventListener('mouseup', () => {\n  const selection = window.getSelection();\n  const selectedText = selection.toString().trim();\n  \n  if (selectedText.length > 0) {\n    showSaveButton(selection);\n  } else {\n    hideSaveButton();\n  }\n});\n\n// Create and show save button\nfunction showSaveButton(selection) {\n  hideSaveButton(); // Remove existing button\n  \n  const range = selection.getRangeAt(0);\n  const rect = range.getBoundingClientRect();\n  \n  saveButton = document.createElement('div');\n  saveButton.innerHTML = 'üìù Salvar no NotesApp';\n  saveButton.style.cssText = `\n    position: fixed;\n    top: ${rect.bottom + window.scrollY + 5}px;\n    left: ${rect.left + window.scrollX}px;\n    background: #3b82f6;\n    color: white;\n    padding: 8px 12px;\n    border-radius: 6px;\n    font-size: 12px;\n    font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n    cursor: pointer;\n    z-index: 10000;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    transition: all 0.2s;\n  `;\n  \n  saveButton.addEventListener('mouseenter', () => {\n    saveButton.style.background = '#2563eb';\n    saveButton.style.transform = 'translateY(-2px)';\n  });\n  \n  saveButton.addEventListener('mouseleave', () => {\n    saveButton.style.background = '#3b82f6';\n    saveButton.style.transform = 'translateY(0)';\n  });\n  \n  saveButton.addEventListener('click', () => {\n    saveSelectedText();\n    hideSaveButton();\n  });\n  \n  document.body.appendChild(saveButton);\n  \n  // Auto-hide after 5 seconds\n  setTimeout(hideSaveButton, 5000);\n}\n\n// Hide save button\nfunction hideSaveButton() {\n  if (saveButton) {\n    saveButton.remove();\n    saveButton = null;\n  }\n}\n\n// Save selected text to notes\nfunction saveSelectedText() {\n  const selection = window.getSelection();\n  const selectedText = selection.toString().trim();\n  \n  if (selectedText.length === 0) return;\n  \n  const noteData = {\n    title: `Texto de: ${document.title}`,\n    content: selectedText,\n    tags: ['web-clip', 'selecionado'],\n    source_url: window.location.href\n  };\n  \n  // Send to background script\n  chrome.runtime.sendMessage({\n    action: 'saveNote',\n    noteData: noteData\n  });\n  \n  // Clear selection\n  selection.removeAllRanges();\n  \n  // Show success feedback\n  showFeedback('üíæ Texto salvo no NotesApp!');\n}\n\n// Show feedback message\nfunction showFeedback(message) {\n  const feedback = document.createElement('div');\n  feedback.textContent = message;\n  feedback.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #10b981;\n    color: white;\n    padding: 12px 20px;\n    border-radius: 8px;\n    font-size: 14px;\n    font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n    z-index: 10001;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    animation: slideIn 0.3s ease;\n  `;\n  \n  // Add animation keyframes\n  if (!document.querySelector('#notesapp-animations')) {\n    const style = document.createElement('style');\n    style.id = 'notesapp-animations';\n    style.textContent = `\n      @keyframes slideIn {\n        from { transform: translateX(100%); opacity: 0; }\n        to { transform: translateX(0); opacity: 1; }\n      }\n      @keyframes slideOut {\n        from { transform: translateX(0); opacity: 1; }\n        to { transform: translateX(100%); opacity: 0; }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  \n  document.body.appendChild(feedback);\n  \n  // Auto-remove after 3 seconds\n  setTimeout(() => {\n    feedback.style.animation = 'slideOut 0.3s ease';\n    setTimeout(() => feedback.remove(), 300);\n  }, 3000);\n}\n\n// Hide save button when clicking elsewhere\ndocument.addEventListener('click', (e) => {\n  if (saveButton && !saveButton.contains(e.target)) {\n    hideSaveButton();\n  }\n});\n\n// Hide save button when scrolling\ndocument.addEventListener('scroll', hideSaveButton);","size_bytes":3931},"extension/popup.js":{"content":"// NotesApp Extension Popup Script\n\nconst API_BASE = 'https://your-app-domain.vercel.app/api';\n\n// Load notes when popup opens\ndocument.addEventListener('DOMContentLoaded', async () => {\n  await loadNotes();\n});\n\n// Load recent notes\nasync function loadNotes() {\n  try {\n    const response = await fetch(`${API_BASE}/notes`);\n    const notes = await response.json();\n    \n    const notesList = document.getElementById('notesList');\n    \n    if (notes.length === 0) {\n      notesList.innerHTML = `\n        <div class=\"empty-state\">\n          <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\"></path>\n            <path fill-rule=\"evenodd\" d=\"M4 5a2 2 0 012-2v1a1 1 0 001 1h6a1 1 0 001-1V3a2 2 0 012 2v6.5a1.5 1.5 0 01-1.5 1.5h-7A1.5 1.5 0 014 11.5V5z\" clip-rule=\"evenodd\"></path>\n          </svg>\n          <p>Nenhuma nota ainda</p>\n        </div>\n      `;\n      return;\n    }\n    \n    // Show latest 5 notes\n    const recentNotes = notes.slice(0, 5);\n    notesList.innerHTML = recentNotes.map(note => `\n      <div class=\"note-item\" onclick=\"openNote('${note.id}')\">\n        <div class=\"note-title\">${escapeHtml(note.title)}</div>\n        <div class=\"note-content\">${escapeHtml(note.content)}</div>\n        <div class=\"note-meta\">\n          <span class=\"note-date\">${formatDate(note.updatedAt)}</span>\n          ${note.categoryId ? `<span class=\"category-dot\" style=\"background: ${getCategoryColor(note.categoryId)}\"></span>` : ''}\n        </div>\n      </div>\n    `).join('');\n    \n  } catch (error) {\n    console.error('Error loading notes:', error);\n    document.getElementById('notesList').innerHTML = `\n      <div class=\"empty-state\">\n        <p>Erro ao carregar notas</p>\n      </div>\n    `;\n  }\n}\n\n// Add quick note\nasync function addQuickNote() {\n  const textarea = document.getElementById('quickNote');\n  const content = textarea.value.trim();\n  \n  if (!content) return;\n  \n  try {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: content.split('\\\\n')[0].substring(0, 50) + (content.length > 50 ? '...' : ''),\n        content: content,\n        tags: [],\n        checklist: [],\n      }),\n    });\n    \n    if (response.ok) {\n      textarea.value = '';\n      await loadNotes();\n      \n      // Show success feedback\n      const button = textarea.nextElementSibling;\n      const originalText = button.textContent;\n      button.textContent = '‚úÖ Salvo!';\n      button.style.background = '#10b981';\n      \n      setTimeout(() => {\n        button.textContent = originalText;\n        button.style.background = '#3b82f6';\n      }, 2000);\n    }\n  } catch (error) {\n    console.error('Error saving note:', error);\n  }\n}\n\n// Open note in main app\nfunction openNote(noteId) {\n  chrome.tabs.create({\n    url: `https://your-app-domain.vercel.app?note=${noteId}`\n  });\n}\n\n// Open main app\nfunction openApp() {\n  chrome.tabs.create({\n    url: 'https://your-app-domain.vercel.app'\n  });\n}\n\n// Open widget (new tab)\nfunction openWidget() {\n  chrome.tabs.create({\n    url: chrome.runtime.getURL('widget.html')\n  });\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\nfunction formatDate(dateStr) {\n  const date = new Date(dateStr);\n  const now = new Date();\n  const diffMs = now - date;\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 0) return 'Hoje';\n  if (diffDays === 1) return 'Ontem';\n  if (diffDays < 7) return `${diffDays} dias`;\n  if (diffDays < 30) return `${Math.floor(diffDays / 7)} sem.`;\n  return date.toLocaleDateString('pt-BR');\n}\n\nfunction getCategoryColor(categoryId) {\n  // Default colors for categories\n  const colors = {\n    'trabalho': '#3b82f6',\n    'pessoal': '#10b981',\n    'estudos': '#8b5cf6',\n    'urgente': '#ef4444',\n    'saude': '#14b8a6',\n    'receitas': '#ec4899',\n  };\n  return colors[categoryId] || '#6b7280';\n}","size_bytes":4064},"extension/widget.js":{"content":"// NotesApp Widget Script for New Tab\n\nconst API_BASE = 'https://your-app-domain.vercel.app/api';\nlet allNotes = [];\nlet currentFilter = 'all';\n\n// Initialize widget when page loads\ndocument.addEventListener('DOMContentLoaded', async () => {\n  await loadNotes();\n});\n\n// Load all notes\nasync function loadNotes() {\n  try {\n    const response = await fetch(`${API_BASE}/notes`);\n    allNotes = await response.json();\n    displayNotes();\n  } catch (error) {\n    console.error('Error loading notes:', error);\n    showError('N√£o foi poss√≠vel carregar as notas. Verifique sua conex√£o.');\n  }\n}\n\n// Display notes based on current filter\nfunction displayNotes() {\n  const notesGrid = document.getElementById('notesGrid');\n  let filteredNotes = [...allNotes];\n  \n  // Apply filters\n  switch (currentFilter) {\n    case 'favorites':\n      filteredNotes = allNotes.filter(note => note.isFavorite);\n      break;\n    case 'recent':\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      filteredNotes = allNotes.filter(note => new Date(note.updatedAt) > sevenDaysAgo);\n      break;\n    case 'reminders':\n      filteredNotes = allNotes.filter(note => note.reminderDate);\n      break;\n  }\n  \n  // Limit to 12 notes for better performance\n  filteredNotes = filteredNotes.slice(0, 12);\n  \n  if (filteredNotes.length === 0) {\n    notesGrid.innerHTML = `\n      <div class=\"empty-state\" style=\"grid-column: 1 / -1;\">\n        <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\"></path>\n          <path fill-rule=\"evenodd\" d=\"M4 5a2 2 0 012-2v1a1 1 0 001 1h6a1 1 0 001-1V3a2 2 0 012 2v6.5a1.5 1.5 0 01-1.5 1.5h-7A1.5 1.5 0 014 11.5V5z\" clip-rule=\"evenodd\"></path>\n        </svg>\n        <h3>Nenhuma nota encontrada</h3>\n        <p>${getEmptyStateMessage()}</p>\n      </div>\n    `;\n    return;\n  }\n  \n  notesGrid.innerHTML = filteredNotes.map(note => `\n    <div class=\"note-card\" onclick=\"openNote('${note.id}')\">\n      <div class=\"note-title\">${escapeHtml(note.title)}</div>\n      <div class=\"note-content\">${escapeHtml(note.content)}</div>\n      <div class=\"note-meta\">\n        <span>${formatDate(note.updatedAt)}</span>\n        ${note.categoryId ? `\n          <div class=\"category-tag\">\n            <div class=\"category-dot\" style=\"background: ${getCategoryColor(note.categoryId)}\"></div>\n            ${getCategoryName(note.categoryId)}\n          </div>\n        ` : ''}\n      </div>\n      ${note.isFavorite ? '<div style=\"position: absolute; top: 12px; right: 12px;\">‚≠ê</div>' : ''}\n      ${note.reminderDate ? '<div style=\"position: absolute; top: 12px; right: 32px;\">üîî</div>' : ''}\n    </div>\n  `).join('');\n}\n\n// Handle filter buttons\nfunction filterNotes(filter) {\n  currentFilter = filter;\n  \n  // Update active button\n  document.querySelectorAll('.filter-btn').forEach(btn => {\n    btn.classList.remove('active');\n  });\n  event.target.classList.add('active');\n  \n  displayNotes();\n}\n\n// Handle quick add\nfunction handleQuickAdd(event) {\n  if (event.key === 'Enter') {\n    addQuickNote();\n  }\n}\n\n// Add quick note\nasync function addQuickNote() {\n  const input = document.getElementById('quickNote');\n  const content = input.value.trim();\n  \n  if (!content) return;\n  \n  try {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: content.split('\\\\n')[0].substring(0, 50) + (content.length > 50 ? '...' : ''),\n        content: content,\n        tags: [],\n        checklist: [],\n      }),\n    });\n    \n    if (response.ok) {\n      input.value = '';\n      await loadNotes();\n      \n      // Show success animation\n      input.style.background = 'rgba(16, 185, 129, 0.3)';\n      setTimeout(() => {\n        input.style.background = 'rgba(255, 255, 255, 0.2)';\n      }, 1000);\n    }\n  } catch (error) {\n    console.error('Error saving note:', error);\n    showError('Erro ao salvar nota');\n  }\n}\n\n// Open note in main app\nfunction openNote(noteId) {\n  window.open(`https://your-app-domain.vercel.app?note=${noteId}`, '_blank');\n}\n\n// Open full app\nfunction openFullApp() {\n  window.open('https://your-app-domain.vercel.app', '_blank');\n}\n\n// Refresh notes\nasync function refreshNotes() {\n  const button = event.target;\n  const originalText = button.textContent;\n  button.textContent = 'üîÑ Carregando...';\n  \n  await loadNotes();\n  \n  button.textContent = '‚úÖ Atualizado!';\n  setTimeout(() => {\n    button.textContent = originalText;\n  }, 2000);\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\nfunction formatDate(dateStr) {\n  const date = new Date(dateStr);\n  const now = new Date();\n  const diffMs = now - date;\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 0) return 'Hoje';\n  if (diffDays === 1) return 'Ontem';\n  if (diffDays < 7) return `${diffDays}d atr√°s`;\n  return date.toLocaleDateString('pt-BR');\n}\n\nfunction getCategoryColor(categoryId) {\n  const colors = {\n    'trabalho': '#3b82f6',\n    'pessoal': '#10b981', \n    'estudos': '#8b5cf6',\n    'urgente': '#ef4444',\n    'saude': '#14b8a6',\n    'receitas': '#ec4899',\n  };\n  return colors[categoryId] || '#6b7280';\n}\n\nfunction getCategoryName(categoryId) {\n  const names = {\n    'trabalho': 'Trabalho',\n    'pessoal': 'Pessoal',\n    'estudos': 'Estudos', \n    'urgente': 'Urgente',\n    'saude': 'Sa√∫de',\n    'receitas': 'Receitas',\n  };\n  return names[categoryId] || 'Categoria';\n}\n\nfunction getEmptyStateMessage() {\n  switch (currentFilter) {\n    case 'favorites': return 'Adicione algumas notas aos favoritos para v√™-las aqui';\n    case 'recent': return 'Nenhuma nota criada nos √∫ltimos 7 dias';\n    case 'reminders': return 'Nenhuma nota com lembretes configurados';\n    default: return 'Comece criando sua primeira nota!';\n  }\n}\n\nfunction showError(message) {\n  const notesGrid = document.getElementById('notesGrid');\n  notesGrid.innerHTML = `\n    <div class=\"empty-state\" style=\"grid-column: 1 / -1;\">\n      <p style=\"color: #ef4444;\">‚ö†Ô∏è ${message}</p>\n    </div>\n  `;\n}","size_bytes":6201},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertNoteSchema, updateNoteSchema, insertCategorySchema, insertTagSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Notes routes\n  app.get(\"/api/notes\", async (req, res) => {\n    try {\n      const { search, category, tag, favorite, archived, reminders } = req.query;\n      \n      let notes;\n      if (search) {\n        notes = await storage.searchNotes(search as string);\n      } else if (category) {\n        notes = await storage.getNotesByCategory(category as string);\n      } else if (tag) {\n        notes = await storage.getNotesByTag(tag as string);\n      } else if (favorite === 'true') {\n        notes = await storage.getFavoriteNotes();\n      } else if (archived === 'true') {\n        notes = await storage.getArchivedNotes();\n      } else if (reminders === 'true') {\n        notes = await storage.getNotesWithReminders();\n      } else {\n        notes = await storage.getAllNotes();\n      }\n      \n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notes\" });\n    }\n  });\n\n  app.get(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const note = await storage.getNoteById(req.params.id);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch note\" });\n    }\n  });\n\n  app.post(\"/api/notes\", async (req, res) => {\n    try {\n      const noteData = insertNoteSchema.parse(req.body);\n      const note = await storage.createNote(noteData);\n      res.status(201).json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid note data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create note\" });\n    }\n  });\n\n  app.patch(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const noteData = updateNoteSchema.parse(req.body);\n      const note = await storage.updateNote(req.params.id, noteData);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid note data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update note\" });\n    }\n  });\n\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteNote(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete note\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCategory(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Tags routes\n  app.get(\"/api/tags\", async (req, res) => {\n    try {\n      const tags = await storage.getAllTags();\n      res.json(tags);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tags\" });\n    }\n  });\n\n  app.post(\"/api/tags\", async (req, res) => {\n    try {\n      const tagData = insertTagSchema.parse(req.body);\n      const tag = await storage.createTag(tagData);\n      res.status(201).json(tag);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid tag data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create tag\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4811},"server/storage.ts":{"content":"import { type Note, type InsertNote, type UpdateNote, type Category, type InsertCategory, type Tag, type InsertTag } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Notes\n  getAllNotes(): Promise<Note[]>;\n  getNoteById(id: string): Promise<Note | undefined>;\n  createNote(note: InsertNote): Promise<Note>;\n  updateNote(id: string, note: UpdateNote): Promise<Note | undefined>;\n  deleteNote(id: string): Promise<boolean>;\n  searchNotes(query: string): Promise<Note[]>;\n  getNotesByCategory(categoryId: string): Promise<Note[]>;\n  getNotesByTag(tag: string): Promise<Note[]>;\n  getFavoriteNotes(): Promise<Note[]>;\n  getArchivedNotes(): Promise<Note[]>;\n  getNotesWithReminders(): Promise<Note[]>;\n\n  // Categories\n  getAllCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n\n  // Tags\n  getAllTags(): Promise<Tag[]>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  deleteTag(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private notes: Map<string, Note>;\n  private categories: Map<string, Category>;\n  private tags: Map<string, Tag>;\n\n  constructor() {\n    this.notes = new Map();\n    this.categories = new Map();\n    this.tags = new Map();\n\n    // Initialize with default categories\n    this.initializeDefaultCategories();\n  }\n\n  private async initializeDefaultCategories() {\n    const defaultCategories = [\n      { name: \"Trabalho\", color: \"#3b82f6\" },\n      { name: \"Pessoal\", color: \"#10b981\" },\n      { name: \"Estudos\", color: \"#8b5cf6\" },\n      { name: \"Urgente\", color: \"#ef4444\" },\n      { name: \"Sa√∫de\", color: \"#14b8a6\" },\n      { name: \"Receitas\", color: \"#ec4899\" },\n    ];\n\n    for (const category of defaultCategories) {\n      await this.createCategory(category);\n    }\n  }\n\n  // Notes methods\n  async getAllNotes(): Promise<Note[]> {\n    return Array.from(this.notes.values()).sort((a, b) => \n      new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n    );\n  }\n\n  async getNoteById(id: string): Promise<Note | undefined> {\n    return this.notes.get(id);\n  }\n\n  async createNote(insertNote: InsertNote): Promise<Note> {\n    const id = randomUUID();\n    const now = new Date();\n    const note: Note = {\n      ...insertNote,\n      id,\n      categoryId: insertNote.categoryId || null,\n      tags: insertNote.tags || [],\n      checklist: insertNote.checklist || [],\n      isFavorite: insertNote.isFavorite || false,\n      isArchived: insertNote.isArchived || false,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.notes.set(id, note);\n    return note;\n  }\n\n  async updateNote(id: string, updateNote: UpdateNote): Promise<Note | undefined> {\n    const existingNote = this.notes.get(id);\n    if (!existingNote) return undefined;\n\n    const updatedNote: Note = {\n      ...existingNote,\n      ...updateNote,\n      id,\n      updatedAt: new Date(),\n    };\n    this.notes.set(id, updatedNote);\n    return updatedNote;\n  }\n\n  async deleteNote(id: string): Promise<boolean> {\n    return this.notes.delete(id);\n  }\n\n  async searchNotes(query: string): Promise<Note[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return Array.from(this.notes.values()).filter(note =>\n      note.title.toLowerCase().includes(lowercaseQuery) ||\n      note.content.toLowerCase().includes(lowercaseQuery) ||\n      (note.tags && note.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery)))\n    );\n  }\n\n  async getNotesByCategory(categoryId: string): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(note => note.categoryId === categoryId);\n  }\n\n  async getNotesByTag(tag: string): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(note => note.tags && note.tags.includes(tag));\n  }\n\n  async getFavoriteNotes(): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(note => note.isFavorite);\n  }\n\n  async getArchivedNotes(): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(note => note.isArchived);\n  }\n\n  async getNotesWithReminders(): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(note => note.reminderDate != null);\n  }\n\n  // Categories methods\n  async getAllCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = {\n      ...insertCategory,\n      id,\n      createdAt: new Date(),\n    };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  async updateCategory(id: string, updateCategory: Partial<InsertCategory>): Promise<Category | undefined> {\n    const existingCategory = this.categories.get(id);\n    if (!existingCategory) return undefined;\n\n    const updatedCategory: Category = {\n      ...existingCategory,\n      ...updateCategory,\n    };\n    this.categories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    return this.categories.delete(id);\n  }\n\n  // Tags methods\n  async getAllTags(): Promise<Tag[]> {\n    return Array.from(this.tags.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createTag(insertTag: InsertTag): Promise<Tag> {\n    const id = randomUUID();\n    const tag: Tag = {\n      ...insertTag,\n      id,\n      createdAt: new Date(),\n    };\n    this.tags.set(id, tag);\n    return tag;\n  }\n\n  async deleteTag(id: string): Promise<boolean> {\n    return this.tags.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5914},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Tags table\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Notes table\nexport const notes = pgTable(\"notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  tags: text(\"tags\").array().default([]),\n  checklist: jsonb(\"checklist\").$type<ChecklistItem[]>().default([]),\n  reminderDate: timestamp(\"reminder_date\"),\n  reminderRepeat: text(\"reminder_repeat\"), // daily, weekly, monthly\n  isFavorite: boolean(\"is_favorite\").default(false),\n  isArchived: boolean(\"is_archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Checklist item type\nexport type ChecklistItem = {\n  id: string;\n  text: string;\n  completed: boolean;\n};\n\n// Insert schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTagSchema = createInsertSchema(tags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  tags: z.array(z.string()).optional(),\n  checklist: z.array(z.object({\n    id: z.string(),\n    text: z.string(),\n    completed: z.boolean(),\n  })).optional(),\n});\n\n// Update schemas\nexport const updateNoteSchema = insertNoteSchema.partial();\n\n// Types\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type Tag = typeof tags.$inferSelect;\n\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\nexport type UpdateNote = z.infer<typeof updateNoteSchema>;\nexport type Note = typeof notes.$inferSelect;\n","size_bytes":2519},"client/public/sw.js":{"content":"const CACHE_NAME = 'notesapp-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json'\n];\n\n// Install event\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate event\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline note creation\nself.addEventListener('sync', event => {\n  if (event.tag === 'background-sync-notes') {\n    event.waitUntil(syncNotes());\n  }\n});\n\nasync function syncNotes() {\n  // Get pending notes from IndexedDB and sync with server\n  // This would require IndexedDB implementation for offline storage\n  console.log('Syncing notes in background...');\n}\n\n// Push notifications for reminders\nself.addEventListener('push', event => {\n  const options = {\n    body: event.data ? event.data.text() : 'Voc√™ tem um lembrete!',\n    icon: '/icon-192.png',\n    badge: '/icon-192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Ver nota',\n        icon: '/images/checkmark.png'\n      },\n      {\n        action: 'close',\n        title: 'Fechar',\n        icon: '/images/xmark.png'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('NotesApp', options)\n  );\n});\n\n// Handle notification clicks\nself.addEventListener('notificationclick', event => {\n  event.notification.close();\n\n  if (event.action === 'explore') {\n    // Open the app to the relevant note\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n","size_bytes":2205},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport NotesPage from \"@/pages/notes\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={NotesPage} />\n      <Route path=\"/notes\" component={NotesPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":876},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(240 10% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 3.9%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221 83% 53%);\n  --chart-1: hsl(221 83% 53%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(240 10% 3.9%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221 83% 53%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(240 10% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(240 10% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(240 10% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(240 3.7% 15.9%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(240 3.7% 15.9%);\n  --muted-foreground: hsl(240 5% 64.9%);\n  --accent: hsl(240 3.7% 15.9%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 3.7% 15.9%);\n  --input: hsl(240 3.7% 15.9%);\n  --ring: hsl(221 83% 53%);\n  --sidebar: hsl(240 10% 3.9%);\n  --sidebar-foreground: hsl(0 0% 98%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(240 3.7% 15.9%);\n  --sidebar-accent-foreground: hsl(0 0% 98%);\n  --sidebar-border: hsl(240 3.7% 15.9%);\n  --sidebar-ring: hsl(221 83% 53%);\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.9);\n}\n\n.dark .glass-effect {\n  background: rgba(15, 15, 15, 0.9);\n}\n\n.note-card {\n  transition: all 0.2s ease;\n}\n\n.note-card:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\n.dark .note-card:hover {\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n}\n\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n","size_bytes":3311},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/calendar-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useNotes } from \"@/hooks/use-notes\";\nimport { type Note } from \"@shared/schema\";\nimport { Calendar as CalendarIcon, Clock, Bell } from \"lucide-react\";\nimport { format, isToday, isSameDay } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface CalendarModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CalendarModal({ isOpen, onClose }: CalendarModalProps) {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const { data: allNotes = [] } = useNotes();\n\n  // Filter notes with reminders\n  const notesWithReminders = allNotes.filter(note => note.reminderDate);\n\n  // Get notes for selected date\n  const getNotesForDate = (date: Date) => {\n    return notesWithReminders.filter(note => {\n      if (!note.reminderDate) return false;\n      return isSameDay(new Date(note.reminderDate), date);\n    });\n  };\n\n  // Get dates with reminders for calendar highlighting\n  const getDatesWithReminders = () => {\n    return notesWithReminders\n      .filter(note => note.reminderDate)\n      .map(note => new Date(note.reminderDate!));\n  };\n\n  const selectedDateNotes = selectedDate ? getNotesForDate(selectedDate) : [];\n\n  const formatReminderTime = (date: string) => {\n    return format(new Date(date), \"HH:mm\", { locale: ptBR });\n  };\n\n  const formatReminderDate = (date: string) => {\n    const reminderDate = new Date(date);\n    if (isToday(reminderDate)) {\n      return \"Hoje\";\n    }\n    return format(reminderDate, \"dd 'de' MMMM\", { locale: ptBR });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <CalendarIcon className=\"w-5 h-5\" />\n            <span>Calend√°rio de Lembretes</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-6\">\n          {/* Calendar */}\n          <div className=\"flex-1\">\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={setSelectedDate}\n              className=\"rounded-md border\"\n              modifiers={{\n                hasReminder: getDatesWithReminders(),\n              }}\n              modifiersStyles={{\n                hasReminder: {\n                  backgroundColor: 'hsl(var(--primary))',\n                  color: 'hsl(var(--primary-foreground))',\n                  fontWeight: 'bold',\n                },\n              }}\n            />\n            \n            {/* Legend */}\n            <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n              <h4 className=\"text-sm font-semibold mb-2\">Legenda</h4>\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 bg-primary rounded\"></div>\n                  <span>Dias com lembretes</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-3 h-3\" />\n                  <span>Total: {notesWithReminders.length} lembretes</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes for selected date */}\n          <div className=\"flex-1\">\n            <div className=\"border rounded-lg p-4\">\n              <h3 className=\"font-semibold mb-4 flex items-center space-x-2\">\n                <Bell className=\"w-4 h-4\" />\n                <span>\n                  Lembretes para {selectedDate ? formatReminderDate(selectedDate.toISOString()) : \"\"}\n                </span>\n              </h3>\n              \n              <ScrollArea className=\"h-80\">\n                {selectedDateNotes.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {selectedDateNotes.map(note => (\n                      <div\n                        key={note.id}\n                        className=\"p-3 border border-border rounded-lg bg-card hover:bg-accent transition-colors cursor-pointer\"\n                        data-testid={`calendar-note-${note.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <h4 className=\"font-medium text-foreground truncate\">\n                            {note.title}\n                          </h4>\n                          <Badge variant=\"outline\" className=\"ml-2\">\n                            {formatReminderTime(note.reminderDate!)}\n                          </Badge>\n                        </div>\n                        \n                        {note.content && (\n                          <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n                            {note.content}\n                          </p>\n                        )}\n                        \n                        {note.reminderRepeat && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {note.reminderRepeat === 'daily' && 'Di√°rio'}\n                            {note.reminderRepeat === 'weekly' && 'Semanal'}\n                            {note.reminderRepeat === 'monthly' && 'Mensal'}\n                          </Badge>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Bell className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p>Nenhum lembrete para este dia</p>\n                  </div>\n                )}\n              </ScrollArea>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"mt-4 grid grid-cols-2 gap-4\">\n              <div className=\"p-3 bg-muted rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-foreground\">\n                  {notesWithReminders.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total lembretes</p>\n              </div>\n              <div className=\"p-3 bg-muted rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-foreground\">\n                  {getDatesWithReminders().length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Dias com lembretes</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6853},"client/src/components/filter-bar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { type Category } from \"@shared/schema\";\nimport { isToday, isThisWeek, isThisMonth } from \"date-fns\";\n\ninterface FilterBarProps {\n  categories: Category[];\n  selectedCategory: string | null;\n  selectedTag: string | null;\n  onCategorySelect: (categoryId: string | null) => void;\n  onTagSelect: (tag: string | null) => void;\n  onDateFilter?: (filter: 'today' | 'week' | 'month' | null) => void;\n  viewMode: \"all\" | \"favorites\" | \"archived\" | \"reminders\";\n  onViewModeChange: (mode: \"all\" | \"favorites\" | \"archived\" | \"reminders\") => void;\n}\n\nexport function FilterBar({\n  categories,\n  selectedCategory,\n  selectedTag,\n  onCategorySelect,\n  onTagSelect,\n  viewMode,\n  onViewModeChange,\n  onDateFilter,\n}: FilterBarProps) {\n  return (\n    <div className=\"bg-card border-b border-border px-4 md:px-6 py-3\">\n      <ScrollArea>\n        <div className=\"flex items-center space-x-3\">\n          <span className=\"text-sm text-muted-foreground whitespace-nowrap\">Filtrar por:</span>\n\n          {/* Date Filters */}\n          <Button\n            variant={viewMode === \"all\" && !selectedCategory && !selectedTag ? \"default\" : \"secondary\"}\n            size=\"sm\"\n            className=\"whitespace-nowrap rounded-full\"\n            onClick={() => {\n              onViewModeChange(\"all\");\n              onCategorySelect(null);\n              onTagSelect(null);\n            }}\n            data-testid=\"filter-all\"\n          >\n            Todas\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            className=\"whitespace-nowrap rounded-full\"\n            onClick={() => onDateFilter?.('today')}\n            data-testid=\"filter-today\"\n          >\n            Hoje\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            className=\"whitespace-nowrap rounded-full\"\n            onClick={() => onDateFilter?.('week')}\n            data-testid=\"filter-week\"\n          >\n            Esta Semana\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            className=\"whitespace-nowrap rounded-full\"\n            onClick={() => onDateFilter?.('month')}\n            data-testid=\"filter-month\"\n          >\n            Este M√™s\n          </Button>\n\n          <div className=\"w-px h-4 bg-border mx-2\" />\n\n          {/* Category Filters */}\n          {categories.slice(0, 2).map(category => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"secondary\"}\n              size=\"sm\"\n              className=\"whitespace-nowrap rounded-full flex items-center space-x-1\"\n              onClick={() => onCategorySelect(category.id)}\n              data-testid={`filter-category-${category.id}`}\n            >\n              <div\n                className=\"w-2 h-2 rounded-full\"\n                style={{ backgroundColor: category.color }}\n              />\n              <span>{category.name}</span>\n            </Button>\n          ))}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":3171},"client/src/components/mobile-nav.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Home, Search, Bell, Calendar, Settings } from \"lucide-react\";\n\nexport function MobileNav() {\n  return (\n    <nav className=\"md:hidden bg-card border-t border-border px-4 py-2 fixed bottom-0 left-0 right-0 z-30\">\n      <div className=\"flex items-center justify-around\">\n        <Button\n          variant=\"ghost\"\n          className=\"flex flex-col items-center space-y-1 py-2 text-primary\"\n          data-testid=\"mobile-nav-notes\"\n        >\n          <Home className=\"w-5 h-5\" />\n          <span className=\"text-xs font-medium\">Notas</span>\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className=\"flex flex-col items-center space-y-1 py-2 text-muted-foreground\"\n          data-testid=\"mobile-nav-search\"\n        >\n          <Search className=\"w-5 h-5\" />\n          <span className=\"text-xs\">Buscar</span>\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className=\"flex flex-col items-center space-y-1 py-2 text-muted-foreground relative\"\n          data-testid=\"mobile-nav-reminders\"\n        >\n          <Bell className=\"w-5 h-5\" />\n          <span className=\"text-xs\">Lembretes</span>\n          <div className=\"absolute -top-1 right-3 w-2 h-2 bg-destructive rounded-full\"></div>\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className=\"flex flex-col items-center space-y-1 py-2 text-muted-foreground\"\n          data-testid=\"mobile-nav-calendar\"\n        >\n          <Calendar className=\"w-5 h-5\" />\n          <span className=\"text-xs\">Calend√°rio</span>\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className=\"flex flex-col items-center space-y-1 py-2 text-muted-foreground\"\n          data-testid=\"mobile-nav-settings\"\n        >\n          <Settings className=\"w-5 h-5\" />\n          <span className=\"text-xs\">Mais</span>\n        </Button>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1924},"client/src/components/note-card.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Note, type Category } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport {\n  Star,\n  MoreHorizontal,\n  Bell,\n  Paperclip,\n} from \"lucide-react\";\n\ninterface NoteCardProps {\n  note: Note;\n  category?: Category;\n  onClick: () => void;\n}\n\nexport function NoteCard({ note, category, onClick }: NoteCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: () =>\n      apiRequest(\"PATCH\", `/api/notes/${note.id}`, {\n        isFavorite: !note.isFavorite,\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notes\"] });\n      toast({\n        title: note.isFavorite ? \"Removido dos favoritos\" : \"Adicionado aos favoritos\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"N√£o foi poss√≠vel atualizar a nota\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleFavorite = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    toggleFavoriteMutation.mutate();\n  };\n\n  const handleMenuClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Implement context menu\n  };\n\n  const completedTasks = note.checklist ? note.checklist.filter(item => item.completed).length : 0;\n  const totalTasks = note.checklist ? note.checklist.length : 0;\n  const previewTasks = note.checklist ? note.checklist.slice(0, 2) : [];\n  const remainingTasks = totalTasks - previewTasks.length;\n\n  const formatDate = (date: Date) => {\n    return formatDistanceToNow(new Date(date), {\n      addSuffix: true,\n      locale: ptBR,\n    });\n  };\n\n  return (\n    <div\n      className=\"note-card bg-card rounded-lg border border-border p-4 cursor-pointer transition-all duration-200 hover:shadow-md hover:-translate-y-0.5\"\n      onClick={onClick}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          {category && (\n            <>\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: category.color }}\n              />\n              <span className=\"text-xs text-muted-foreground\">{category.name}</span>\n            </>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className={`h-6 w-6 p-0 ${note.isFavorite ? \"text-yellow-500\" : \"text-muted-foreground\"} hover:text-yellow-500`}\n            onClick={handleToggleFavorite}\n            data-testid={`button-favorite-${note.id}`}\n          >\n            <Star className={`w-3 h-3 ${note.isFavorite ? \"fill-current\" : \"\"}`} />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n            onClick={handleMenuClick}\n            data-testid={`button-menu-${note.id}`}\n          >\n            <MoreHorizontal className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Title and Content */}\n      <h3 className=\"font-semibold text-foreground mb-2 line-clamp-2\" data-testid={`text-title-${note.id}`}>\n        {note.title}\n      </h3>\n      <p className=\"text-sm text-muted-foreground mb-3 line-clamp-3\" data-testid={`text-content-${note.id}`}>\n        {note.content}\n      </p>\n\n      {/* Checklist Preview */}\n      {note.checklist && note.checklist.length > 0 && (\n        <div className=\"mb-3\">\n          {previewTasks.map(item => (\n            <div key={item.id} className=\"flex items-center space-x-2 mb-1\">\n              <Checkbox\n                checked={item.completed}\n                className=\"w-3 h-3\"\n                disabled\n                data-testid={`checkbox-${item.id}`}\n              />\n              <span\n                className={`text-xs ${\n                  item.completed\n                    ? \"text-muted-foreground line-through\"\n                    : \"text-foreground\"\n                }`}\n              >\n                {item.text}\n              </span>\n            </div>\n          ))}\n          {remainingTasks > 0 && (\n            <span className=\"text-xs text-muted-foreground ml-5\">\n              +{remainingTasks} mais\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Tags */}\n      {note.tags && note.tags.length > 0 && (\n        <div className=\"flex items-center space-x-2 mb-3 flex-wrap gap-1\">\n          {note.tags && note.tags.slice(0, 2).map(tag => (\n            <Badge\n              key={tag}\n              variant=\"secondary\"\n              className=\"text-xs px-2 py-0.5\"\n              data-testid={`tag-${tag}`}\n            >\n              {tag}\n            </Badge>\n          ))}\n          {note.tags && note.tags.length > 2 && (\n            <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n              +{note.tags ? note.tags.length - 2 : 0}\n            </Badge>\n          )}\n        </div>\n      )}\n\n      {/* Footer */}\n      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n        <div className=\"flex items-center space-x-3\">\n          <span data-testid={`text-date-${note.id}`}>\n            {formatDate(note.updatedAt)}\n          </span>\n          {note.reminderDate && (\n            <div className=\"flex items-center space-x-1\">\n              <Bell className=\"w-3 h-3\" />\n              <span>\n                {new Date(note.reminderDate).toLocaleDateString(\"pt-BR\", {\n                  day: \"2-digit\",\n                  month: \"2-digit\",\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                })}\n              </span>\n            </div>\n          )}\n        </div>\n        {/* Placeholder for attachments */}\n        <Paperclip className=\"w-3 h-3 opacity-0\" />\n      </div>\n    </div>\n  );\n}\n","size_bytes":6445},"client/src/components/note-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Note, type Category, type ChecklistItem } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertNoteSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport {\n  ArrowLeft,\n  Star,\n  Bell,\n  Plus,\n  Trash2,\n  Calendar,\n  X,\n} from \"lucide-react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst noteFormSchema = insertNoteSchema.extend({\n  tags: z.array(z.string()).optional(),\n  checklist: z.array(z.object({\n    id: z.string(),\n    text: z.string(),\n    completed: z.boolean(),\n  })).optional(),\n});\n\ntype NoteFormData = z.infer<typeof noteFormSchema>;\n\ninterface NoteEditorProps {\n  isOpen: boolean;\n  note: Note | null;\n  categories: Category[];\n  onClose: () => void;\n}\n\nexport function NoteEditor({ isOpen, note, categories, onClose }: NoteEditorProps) {\n  const [tagInput, setTagInput] = useState(\"\");\n  const [checklist, setChecklist] = useState<ChecklistItem[]>([]);\n  const [newTaskInput, setNewTaskInput] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<NoteFormData>({\n    resolver: zodResolver(noteFormSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      categoryId: \"\",\n      tags: [],\n      checklist: [],\n      reminderDate: undefined,\n      reminderRepeat: \"\",\n      isFavorite: false,\n      isArchived: false,\n    },\n  });\n\n  // Initialize form with note data when editing\n  useEffect(() => {\n    if (note) {\n      form.reset({\n        title: note.title,\n        content: note.content,\n        categoryId: note.categoryId || \"\",\n        tags: note.tags || [],\n        checklist: note.checklist || [],\n        reminderDate: note.reminderDate || undefined,\n        reminderRepeat: note.reminderRepeat || \"\",\n        isFavorite: note.isFavorite,\n        isArchived: note.isArchived,\n      });\n      setChecklist(note.checklist || []);\n    } else {\n      form.reset({\n        title: \"\",\n        content: \"\",\n        categoryId: \"\",\n        tags: [],\n        checklist: [],\n        reminderDate: undefined,\n        reminderRepeat: \"\",\n        isFavorite: false,\n        isArchived: false,\n      });\n      setChecklist([]);\n    }\n  }, [note, form]);\n\n  const createNoteMutation = useMutation({\n    mutationFn: (data: NoteFormData) => apiRequest(\"POST\", \"/api/notes\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notes\"] });\n      toast({ title: \"Nota criada com sucesso!\" });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"N√£o foi poss√≠vel criar a nota\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateNoteMutation = useMutation({\n    mutationFn: (data: NoteFormData) =>\n      apiRequest(\"PATCH\", `/api/notes/${note!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notes\"] });\n      toast({ title: \"Nota atualizada com sucesso!\" });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"N√£o foi poss√≠vel atualizar a nota\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: NoteFormData) => {\n    const formData = {\n      ...data,\n      checklist,\n    };\n\n    if (note) {\n      updateNoteMutation.mutate(formData);\n    } else {\n      createNoteMutation.mutate(formData);\n    }\n  };\n\n  const handleAddTag = () => {\n    if (!tagInput.trim()) return;\n    \n    const currentTags = form.getValues(\"tags\") || [];\n    if (!currentTags.includes(tagInput.trim())) {\n      form.setValue(\"tags\", [...currentTags, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    const currentTags = form.getValues(\"tags\") || [];\n    form.setValue(\"tags\", currentTags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleAddChecklistItem = () => {\n    if (!newTaskInput.trim()) return;\n    \n    const newItem: ChecklistItem = {\n      id: uuidv4(),\n      text: newTaskInput.trim(),\n      completed: false,\n    };\n    \n    setChecklist([...checklist, newItem]);\n    setNewTaskInput(\"\");\n  };\n\n  const handleUpdateChecklistItem = (id: string, updates: Partial<ChecklistItem>) => {\n    setChecklist(checklist.map(item => \n      item.id === id ? { ...item, ...updates } : item\n    ));\n  };\n\n  const handleRemoveChecklistItem = (id: string) => {\n    setChecklist(checklist.filter(item => item.id !== id));\n  };\n\n  const currentTags = form.watch(\"tags\") || [];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-editor\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <DialogTitle>\n              {note ? \"Editar Nota\" : \"Nova Nota\"}\n            </DialogTitle>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              type=\"button\"\n              onClick={() => form.setValue(\"isFavorite\", !form.watch(\"isFavorite\"))}\n              className={form.watch(\"isFavorite\") ? \"text-yellow-500\" : \"\"}\n              data-testid=\"button-toggle-favorite\"\n            >\n              <Star className={`w-4 h-4 ${form.watch(\"isFavorite\") ? \"fill-current\" : \"\"}`} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              data-testid=\"button-reminder\"\n            >\n              <Bell className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              type=\"submit\"\n              onClick={form.handleSubmit(handleSubmit)}\n              disabled={createNoteMutation.isPending || updateNoteMutation.isPending}\n              data-testid=\"button-save-note\"\n            >\n              Salvar\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"overflow-auto max-h-[calc(90vh-120px)] space-y-6\">\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Title */}\n            <Input\n              {...form.register(\"title\")}\n              placeholder=\"T√≠tulo da nota...\"\n              className=\"text-2xl font-bold border-none px-0 focus-visible:ring-0 focus-visible:ring-offset-0\"\n              data-testid=\"input-note-title\"\n            />\n\n            {/* Category and Tags */}\n            <div className=\"flex flex-col md:flex-row md:items-center md:space-x-6 space-y-4 md:space-y-0\">\n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"category\" className=\"text-sm text-muted-foreground whitespace-nowrap\">\n                  Categoria:\n                </Label>\n                <Select\n                  value={form.watch(\"categoryId\")}\n                  onValueChange={(value) => form.setValue(\"categoryId\", value)}\n                >\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n                    <SelectValue placeholder=\"Selecionar categoria\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map(category => (\n                      <SelectItem key={category.id} value={category.id}>\n                        <div className=\"flex items-center space-x-2\">\n                          <div\n                            className=\"w-3 h-3 rounded-full\"\n                            style={{ backgroundColor: category.color }}\n                          />\n                          <span>{category.name}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center space-x-2 flex-1\">\n                <Label htmlFor=\"tags\" className=\"text-sm text-muted-foreground whitespace-nowrap\">\n                  Tags:\n                </Label>\n                <div className=\"flex flex-1 space-x-2\">\n                  <Input\n                    value={tagInput}\n                    onChange={(e) => setTagInput(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        handleAddTag();\n                      }\n                    }}\n                    placeholder=\"Adicionar tags...\"\n                    className=\"flex-1\"\n                    data-testid=\"input-tags\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleAddTag}\n                    data-testid=\"button-add-tag\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Tags Display */}\n            {currentTags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {currentTags.map(tag => (\n                  <Badge key={tag} variant=\"secondary\" className=\"flex items-center space-x-1\">\n                    <span>{tag}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-0 w-4 h-4\"\n                      onClick={() => handleRemoveTag(tag)}\n                      data-testid={`button-remove-tag-${tag}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n\n            {/* Content */}\n            <div>\n              <Textarea\n                {...form.register(\"content\")}\n                placeholder=\"Escreva sua nota aqui...\"\n                className=\"min-h-64 resize-none\"\n                data-testid=\"textarea-note-content\"\n              />\n            </div>\n\n            {/* Checklist Section */}\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-lg font-semibold\">Checklist</h3>\n              </div>\n\n              <div className=\"space-y-2\">\n                {checklist.map(item => (\n                  <div key={item.id} className=\"flex items-center space-x-3 p-2 border border-border rounded-lg\">\n                    <Checkbox\n                      checked={item.completed}\n                      onCheckedChange={(checked) =>\n                        handleUpdateChecklistItem(item.id, { completed: !!checked })\n                      }\n                      data-testid={`checkbox-task-${item.id}`}\n                    />\n                    <Input\n                      value={item.text}\n                      onChange={(e) =>\n                        handleUpdateChecklistItem(item.id, { text: e.target.value })\n                      }\n                      className=\"flex-1 border-none focus-visible:ring-0 focus-visible:ring-offset-0\"\n                      placeholder=\"Item do checklist...\"\n                      data-testid={`input-task-${item.id}`}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveChecklistItem(item.id)}\n                      className=\"text-muted-foreground hover:text-destructive\"\n                      data-testid={`button-remove-task-${item.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n\n                <div className=\"flex items-center space-x-3 p-2 border border-dashed border-border rounded-lg\">\n                  <Input\n                    value={newTaskInput}\n                    onChange={(e) => setNewTaskInput(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        handleAddChecklistItem();\n                      }\n                    }}\n                    placeholder=\"Adicionar novo item...\"\n                    className=\"flex-1 border-none focus-visible:ring-0 focus-visible:ring-offset-0\"\n                    data-testid=\"input-new-task\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleAddChecklistItem}\n                    data-testid=\"button-add-task\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Reminder Section */}\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-lg font-semibold\">Lembrete</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm text-muted-foreground whitespace-nowrap\">Data e Hora:</Label>\n                    <Input\n                      type=\"datetime-local\"\n                      {...form.register(\"reminderDate\")}\n                      className=\"flex-1\"\n                      data-testid=\"input-reminder-date\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm text-muted-foreground whitespace-nowrap\">Repetir:</Label>\n                    <Select\n                      value={form.watch(\"reminderRepeat\") || \"\"}\n                      onValueChange={(value) => form.setValue(\"reminderRepeat\", value)}\n                    >\n                      <SelectTrigger className=\"flex-1\" data-testid=\"select-reminder-repeat\">\n                        <SelectValue placeholder=\"N√£o repetir\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">N√£o repetir</SelectItem>\n                        <SelectItem value=\"daily\">Diariamente</SelectItem>\n                        <SelectItem value=\"weekly\">Semanalmente</SelectItem>\n                        <SelectItem value=\"monthly\">Mensalmente</SelectItem>\n                        <SelectItem value=\"yearly\">Anualmente</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                {/* Quick Date Buttons */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const tomorrow = new Date();\n                      tomorrow.setDate(tomorrow.getDate() + 1);\n                      tomorrow.setHours(9, 0, 0, 0);\n                      form.setValue(\"reminderDate\", tomorrow.toISOString().slice(0, 16));\n                    }}\n                    data-testid=\"button-tomorrow\"\n                  >\n                    Amanh√£\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const nextWeek = new Date();\n                      nextWeek.setDate(nextWeek.getDate() + 7);\n                      nextWeek.setHours(9, 0, 0, 0);\n                      form.setValue(\"reminderDate\", nextWeek.toISOString().slice(0, 16));\n                    }}\n                    data-testid=\"button-next-week\"\n                  >\n                    Pr√≥xima Semana\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const nextMonth = new Date();\n                      nextMonth.setMonth(nextMonth.getMonth() + 1);\n                      nextMonth.setHours(9, 0, 0, 0);\n                      form.setValue(\"reminderDate\", nextMonth.toISOString().slice(0, 16));\n                    }}\n                    data-testid=\"button-next-month\"\n                  >\n                    Pr√≥ximo M√™s\n                  </Button>\n                  {form.watch(\"reminderDate\") && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => form.setValue(\"reminderDate\", undefined)}\n                      data-testid=\"button-clear-reminder\"\n                    >\n                      Limpar\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":18099},"client/src/components/settings-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Settings, Moon, Sun, Bell, Database, Download, Upload } from \"lucide-react\";\n\ninterface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function SettingsModal({ isOpen, onClose }: SettingsModalProps) {\n  const { theme, setTheme } = useTheme();\n  const [notifications, setNotifications] = useState(true);\n  const [autoSave, setAutoSave] = useState(true);\n\n  const handleExportData = () => {\n    // TODO: Implementar exporta√ß√£o de dados\n    console.log(\"Exportar dados\");\n  };\n\n  const handleImportData = () => {\n    // TODO: Implementar importa√ß√£o de dados  \n    console.log(\"Importar dados\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Settings className=\"w-5 h-5\" />\n            <span>Configura√ß√µes</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Theme Settings */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-semibold text-foreground\">Apar√™ncia</h3>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"theme\" className=\"text-sm\">Tema</Label>\n              <Select value={theme} onValueChange={(value: any) => setTheme(value)}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"light\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Sun className=\"w-4 h-4\" />\n                      <span>Claro</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"dark\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Moon className=\"w-4 h-4\" />\n                      <span>Escuro</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"system\">Sistema</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Notification Settings */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-semibold text-foreground\">Notifica√ß√µes</h3>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Bell className=\"w-4 h-4\" />\n                <Label htmlFor=\"notifications\" className=\"text-sm\">Lembretes</Label>\n              </div>\n              <Switch\n                id=\"notifications\"\n                checked={notifications}\n                onCheckedChange={setNotifications}\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Auto Save Settings */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-semibold text-foreground\">Salvamento</h3>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Database className=\"w-4 h-4\" />\n                <Label htmlFor=\"autosave\" className=\"text-sm\">Salvamento autom√°tico</Label>\n              </div>\n              <Switch\n                id=\"autosave\"\n                checked={autoSave}\n                onCheckedChange={setAutoSave}\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Data Management */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-semibold text-foreground\">Dados</h3>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportData}\n                className=\"flex-1\"\n                data-testid=\"button-export-data\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Exportar\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleImportData}\n                className=\"flex-1\"\n                data-testid=\"button-import-data\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Importar\n              </Button>\n            </div>\n          </div>\n\n          {/* App Info */}\n          <div className=\"text-center text-sm text-muted-foreground pt-4\">\n            <p>NotesApp v1.0.0</p>\n            <p>Aplicativo de notas completo</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5180},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport { type Category, type Note } from \"@shared/schema\";\nimport { SettingsModal } from \"./settings-modal\";\nimport {\n  Home,\n  Star,\n  Bell,\n  Archive,\n  Trash,\n  Settings,\n  Plus,\n  StickyNote,\n  MoreHorizontal,\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  categories: Category[];\n  notes: Note[];\n  selectedCategory: string | null;\n  onCategorySelect: (categoryId: string | null) => void;\n  viewMode: \"all\" | \"favorites\" | \"archived\" | \"reminders\";\n  onViewModeChange: (mode: \"all\" | \"favorites\" | \"archived\" | \"reminders\") => void;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport function Sidebar({\n  categories,\n  notes,\n  selectedCategory,\n  onCategorySelect,\n  viewMode,\n  onViewModeChange,\n  isOpen,\n  onToggle,\n}: SidebarProps) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const favoriteNotes = notes.filter(note => note.isFavorite);\n  const archivedNotes = notes.filter(note => note.isArchived);\n  const reminderNotes = notes.filter(note => note.reminderDate);\n\n  const getCategoryNotesCount = (categoryId: string) => {\n    return notes.filter(note => note.categoryId === categoryId && !note.isArchived).length;\n  };\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n          onClick={onToggle}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside\n        className={cn(\n          \"fixed md:relative z-50 md:z-auto h-full w-64 bg-card border-r border-border transition-transform duration-300 md:translate-x-0\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <StickyNote className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">NotesApp</h1>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <ScrollArea className=\"flex-1 p-4\">\n            <nav className=\"space-y-2\">\n              <Button\n                variant={viewMode === \"all\" ? \"secondary\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => {\n                  onViewModeChange(\"all\");\n                  onCategorySelect(null);\n                }}\n                data-testid=\"nav-all-notes\"\n              >\n                <Home className=\"w-4 h-4 mr-3\" />\n                Todas as Notas\n                <span className=\"ml-auto bg-muted text-muted-foreground px-2 py-1 text-xs rounded-full\">\n                  {notes.filter(note => !note.isArchived).length}\n                </span>\n              </Button>\n\n              <Button\n                variant={viewMode === \"favorites\" ? \"secondary\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => {\n                  onViewModeChange(\"favorites\");\n                  onCategorySelect(null);\n                }}\n                data-testid=\"nav-favorites\"\n              >\n                <Star className=\"w-4 h-4 mr-3\" />\n                Favoritas\n                {favoriteNotes.length > 0 && (\n                  <span className=\"ml-auto bg-muted text-muted-foreground px-2 py-1 text-xs rounded-full\">\n                    {favoriteNotes.length}\n                  </span>\n                )}\n              </Button>\n\n              <Button\n                variant={viewMode === \"reminders\" ? \"secondary\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => {\n                  onViewModeChange(\"reminders\");\n                  onCategorySelect(null);\n                }}\n                data-testid=\"nav-reminders\"\n              >\n                <Bell className=\"w-4 h-4 mr-3\" />\n                Lembretes\n                {reminderNotes.length > 0 && (\n                  <span className=\"ml-auto bg-destructive text-destructive-foreground px-2 py-1 text-xs rounded-full\">\n                    {reminderNotes.length}\n                  </span>\n                )}\n              </Button>\n\n              <Button\n                variant={viewMode === \"archived\" ? \"secondary\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => {\n                  onViewModeChange(\"archived\");\n                  onCategorySelect(null);\n                }}\n                data-testid=\"nav-archived\"\n              >\n                <Archive className=\"w-4 h-4 mr-3\" />\n                Arquivo\n                {archivedNotes.length > 0 && (\n                  <span className=\"ml-auto bg-muted text-muted-foreground px-2 py-1 text-xs rounded-full\">\n                    {archivedNotes.length}\n                  </span>\n                )}\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground\"\n                data-testid=\"nav-trash\"\n              >\n                <Trash className=\"w-4 h-4 mr-3\" />\n                Lixeira\n              </Button>\n            </nav>\n\n            {/* Categories */}\n            <div className=\"mt-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-sm font-semibold text-muted-foreground\">CATEGORIAS</h3>\n              </div>\n              <div className=\"space-y-1\">\n                {categories.map(category => (\n                  <div key={category.id} className=\"flex items-center justify-between group\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className={cn(\n                        \"flex-1 justify-start h-8 px-2\",\n                        selectedCategory === category.id && \"bg-accent text-accent-foreground\"\n                      )}\n                      onClick={() => onCategorySelect(category.id)}\n                      data-testid={`category-${category.id}`}\n                    >\n                      <div\n                        className=\"w-3 h-3 rounded-full mr-2\"\n                        style={{ backgroundColor: category.color }}\n                      />\n                      <span className=\"text-sm\">{category.name}</span>\n                      <span className=\"text-xs text-muted-foreground ml-1\">\n                        ({getCategoryNotesCount(category.id)})\n                      </span>\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"opacity-0 group-hover:opacity-100 h-6 w-6 p-0\"\n                      data-testid={`category-menu-${category.id}`}\n                    >\n                      <MoreHorizontal className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"w-full justify-start h-8 px-2 text-muted-foreground\"\n                  data-testid=\"button-new-category\"\n                >\n                  <Plus className=\"w-3 h-3 mr-2\" />\n                  Nova Categoria\n                </Button>\n              </div>\n            </div>\n          </ScrollArea>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start\"\n              onClick={() => setIsSettingsOpen(true)}\n              data-testid=\"nav-settings\"\n            >\n              <Settings className=\"w-4 h-4 mr-3\" />\n              Configura√ß√µes\n            </Button>\n          </div>\n        </div>\n      </aside>\n      \n      <SettingsModal\n        isOpen={isSettingsOpen}\n        onClose={() => setIsSettingsOpen(false)}\n      />\n    </>\n  );\n}","size_bytes":8166},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"system\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n        ? \"dark\"\n        : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(\"theme\", theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1375},"client/src/components/top-bar.tsx":{"content":"import { useState } from \"react\";\nimport { CalendarModal } from \"./calendar-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport {\n  Menu,\n  Search,\n  Grid3X3,\n  List,\n  Filter,\n  Calendar,\n  Moon,\n  Sun,\n  Plus,\n} from \"lucide-react\";\n\ninterface TopBarProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  onNewNote: () => void;\n  onToggleSidebar: () => void;\n  notesCount: number;\n}\n\nexport function TopBar({\n  searchQuery,\n  onSearchChange,\n  onNewNote,\n  onToggleSidebar,\n  notesCount,\n}: TopBarProps) {\n  const { theme, setTheme } = useTheme();\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border p-4 md:p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden\"\n            onClick={onToggleSidebar}\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"hidden md:block\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Todas as Notas</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {notesCount} {notesCount === 1 ? \"nota\" : \"notas\"} ‚Ä¢ √öltima atualiza√ß√£o h√° 5 min\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {/* Search Bar - Desktop */}\n          <div className=\"relative hidden md:block\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Buscar notas, categorias, tags...\"\n              className=\"pl-10 w-80\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e.target.value)}\n              data-testid=\"input-search-desktop\"\n            />\n          </div>\n\n          {/* View Toggle */}\n          <div className=\"flex items-center bg-muted rounded-lg p-1\">\n            <Button\n              variant={viewMode === \"grid\" ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              className=\"h-8 px-3\"\n              onClick={() => setViewMode(\"grid\")}\n              data-testid=\"button-view-grid\"\n            >\n              <Grid3X3 className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === \"list\" ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              className=\"h-8 px-3\"\n              onClick={() => setViewMode(\"list\")}\n              data-testid=\"button-view-list\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Filter Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n            data-testid=\"button-filter\"\n          >\n            <Filter className=\"w-4 h-4\" />\n          </Button>\n\n          {/* Calendar Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => setIsCalendarOpen(true)}\n            data-testid=\"button-calendar\"\n          >\n            <Calendar className=\"w-4 h-4\" />\n          </Button>\n\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n          >\n            {theme === \"dark\" ? (\n              <Sun className=\"w-4 h-4\" />\n            ) : (\n              <Moon className=\"w-4 h-4\" />\n            )}\n          </Button>\n\n          {/* New Note Button - Desktop */}\n          <Button\n            className=\"hidden md:flex\"\n            onClick={onNewNote}\n            data-testid=\"button-new-note-desktop\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nova Nota\n          </Button>\n        </div>\n      </div>\n\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        onClose={() => setIsCalendarOpen(false)}\n      />\n\n      {/* Mobile Search Bar */}\n      <div className=\"mt-4 md:hidden\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Buscar notas...\"\n            className=\"pl-10\"\n            value={searchQuery}\n            onChange={(e) => onSearchChange(e.target.value)}\n            data-testid=\"input-search-mobile\"\n          />\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4961},"client/src/hooks/use-categories.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\nexport function useCategories() {\n  return useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: () => api.categories.getAll(),\n  });\n}\n","size_bytes":225},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-notes.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\ninterface UseNotesParams {\n  search?: string;\n  category?: string | null;\n  tag?: string | null;\n  favorite?: boolean;\n  archived?: boolean;\n  reminders?: boolean;\n}\n\nexport function useNotes(params: UseNotesParams = {}) {\n  return useQuery({\n    queryKey: [\"/api/notes\", params],\n    queryFn: () => api.notes.getAll({\n      search: params.search,\n      category: params.category || undefined,\n      tag: params.tag || undefined,\n      favorite: params.favorite,\n      archived: params.archived,\n      reminders: params.reminders,\n    }),\n  });\n}\n\nexport function useNote(id: string) {\n  return useQuery({\n    queryKey: [\"/api/notes\", id],\n    queryFn: () => api.notes.getById(id),\n    enabled: !!id,\n  });\n}\n","size_bytes":793},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { Note, InsertNote, UpdateNote, Category, InsertCategory, Tag } from \"@shared/schema\";\n\nexport const api = {\n  // Notes\n  notes: {\n    getAll: (params?: {\n      search?: string;\n      category?: string;\n      tag?: string;\n      favorite?: boolean;\n      archived?: boolean;\n      reminders?: boolean;\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params?.search) searchParams.set(\"search\", params.search);\n      if (params?.category) searchParams.set(\"category\", params.category);\n      if (params?.tag) searchParams.set(\"tag\", params.tag);\n      if (params?.favorite) searchParams.set(\"favorite\", \"true\");\n      if (params?.archived) searchParams.set(\"archived\", \"true\");\n      if (params?.reminders) searchParams.set(\"reminders\", \"true\");\n      \n      const query = searchParams.toString();\n      return fetch(`/api/notes${query ? `?${query}` : \"\"}`, {\n        credentials: \"include\",\n      }).then(res => res.json()) as Promise<Note[]>;\n    },\n\n    getById: (id: string) =>\n      fetch(`/api/notes/${id}`, { credentials: \"include\" }).then(res => res.json()) as Promise<Note>,\n\n    create: (note: InsertNote) =>\n      apiRequest(\"POST\", \"/api/notes\", note).then(res => res.json()) as Promise<Note>,\n\n    update: (id: string, note: UpdateNote) =>\n      apiRequest(\"PATCH\", `/api/notes/${id}`, note).then(res => res.json()) as Promise<Note>,\n\n    delete: (id: string) =>\n      apiRequest(\"DELETE\", `/api/notes/${id}`),\n  },\n\n  // Categories\n  categories: {\n    getAll: () =>\n      fetch(\"/api/categories\", { credentials: \"include\" }).then(res => res.json()) as Promise<Category[]>,\n\n    create: (category: InsertCategory) =>\n      apiRequest(\"POST\", \"/api/categories\", category).then(res => res.json()) as Promise<Category>,\n\n    delete: (id: string) =>\n      apiRequest(\"DELETE\", `/api/categories/${id}`),\n  },\n\n  // Tags\n  tags: {\n    getAll: () =>\n      fetch(\"/api/tags\", { credentials: \"include\" }).then(res => res.json()) as Promise<Tag[]>,\n\n    create: (tag: { name: string }) =>\n      apiRequest(\"POST\", \"/api/tags\", tag).then(res => res.json()) as Promise<Tag>,\n\n    delete: (id: string) =>\n      apiRequest(\"DELETE\", `/api/tags/${id}`),\n  },\n};\n","size_bytes":2238},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notes.tsx":{"content":"import { useState } from \"react\";\nimport { isToday, isThisWeek, isThisMonth } from \"date-fns\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { TopBar } from \"@/components/top-bar\";\nimport { FilterBar } from \"@/components/filter-bar\";\nimport { NoteCard } from \"@/components/note-card\";\nimport { NoteEditor } from \"@/components/note-editor\";\nimport { MobileNav } from \"@/components/mobile-nav\";\nimport { useNotes } from \"@/hooks/use-notes\";\nimport { useCategories } from \"@/hooks/use-categories\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { type Note } from \"@shared/schema\";\n\nexport default function NotesPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [selectedTag, setSelectedTag] = useState<string | null>(null);\n  const [viewMode, setViewMode] = useState<\"all\" | \"favorites\" | \"archived\" | \"reminders\">(\"all\");\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const [editingNote, setEditingNote] = useState<Note | null>(null);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [dateFilter, setDateFilter] = useState<'today' | 'week' | 'month' | null>(null);\n\n  const { data: categories = [] } = useCategories();\n  const { data: notes = [], isLoading } = useNotes({\n    search: searchQuery,\n    category: selectedCategory,\n    tag: selectedTag,\n    favorite: viewMode === \"favorites\",\n    archived: viewMode === \"archived\",\n    reminders: viewMode === \"reminders\",\n  });\n\n  const handleEditNote = (note: Note) => {\n    setEditingNote(note);\n    setIsEditorOpen(true);\n  };\n\n  const handleNewNote = () => {\n    setEditingNote(null);\n    setIsEditorOpen(true);\n  };\n\n  const handleCloseEditor = () => {\n    setIsEditorOpen(false);\n    setEditingNote(null);\n  };\n\n  const handleCategoryFilter = (categoryId: string | null) => {\n    setSelectedCategory(categoryId);\n    setSelectedTag(null);\n    setViewMode(\"all\");\n  };\n\n  const handleTagFilter = (tag: string | null) => {\n    setSelectedTag(tag);\n    setSelectedCategory(null);\n    setViewMode(\"all\");\n  };\n\n  const filteredNotes = notes.filter(note => {\n    if (viewMode === \"archived\" && !note.isArchived) return false;\n    if (viewMode !== \"archived\" && note.isArchived) return false;\n    \n    // Apply date filter\n    if (dateFilter) {\n      const noteDate = new Date(note.updatedAt);\n      switch (dateFilter) {\n        case 'today':\n          if (!isToday(noteDate)) return false;\n          break;\n        case 'week':\n          if (!isThisWeek(noteDate)) return false;\n          break;\n        case 'month':\n          if (!isThisMonth(noteDate)) return false;\n          break;\n      }\n    }\n    \n    return true;\n  });\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      {/* Sidebar */}\n      <Sidebar\n        categories={categories}\n        notes={filteredNotes}\n        selectedCategory={selectedCategory}\n        onCategorySelect={handleCategoryFilter}\n        viewMode={viewMode}\n        onViewModeChange={setViewMode}\n        isOpen={isSidebarOpen}\n        onToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n      />\n\n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <TopBar\n          searchQuery={searchQuery}\n          onSearchChange={setSearchQuery}\n          onNewNote={handleNewNote}\n          onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}\n          notesCount={filteredNotes.length}\n        />\n\n        <FilterBar\n          categories={categories}\n          selectedCategory={selectedCategory}\n          selectedTag={selectedTag}\n          onCategorySelect={handleCategoryFilter}\n          onTagSelect={handleTagFilter}\n          viewMode={viewMode}\n          onViewModeChange={setViewMode}\n          onDateFilter={(filter) => {\n            setDateFilter(filter);\n            setSelectedCategory(null);\n            setSelectedTag(null);\n            setViewMode('all');\n          }}\n        />\n\n        {/* Notes Grid */}\n        <div className=\"flex-1 overflow-auto p-4 md:p-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <div key={i} className=\"bg-card rounded-lg border border-border p-4 animate-pulse\">\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded mb-1\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          ) : filteredNotes.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {filteredNotes.map(note => (\n                <NoteCard\n                  key={note.id}\n                  note={note}\n                  category={categories.find(c => c.id === note.categoryId)}\n                  onClick={() => handleEditNote(note)}\n                  data-testid={`note-card-${note.id}`}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Plus className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {searchQuery || selectedCategory || selectedTag\n                  ? \"Nenhuma nota encontrada\"\n                  : \"Nenhuma nota ainda\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {searchQuery || selectedCategory || selectedTag\n                  ? \"Tente ajustar os filtros de busca.\"\n                  : \"Comece criando sua primeira nota.\"}\n              </p>\n              <Button onClick={handleNewNote} data-testid=\"button-create-first-note\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {searchQuery || selectedCategory || selectedTag\n                  ? \"Nova nota\"\n                  : \"Criar primeira nota\"}\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Floating Action Button - Mobile */}\n      <Button\n        className=\"fixed bottom-20 right-4 w-14 h-14 rounded-full shadow-lg md:hidden z-40\"\n        onClick={handleNewNote}\n        data-testid=\"button-fab-new-note\"\n      >\n        <Plus className=\"w-6 h-6\" />\n      </Button>\n\n      {/* Mobile Navigation */}\n      <MobileNav />\n\n      {/* Note Editor Modal */}\n      <NoteEditor\n        isOpen={isEditorOpen}\n        note={editingNote}\n        categories={categories}\n        onClose={handleCloseEditor}\n      />\n    </div>\n  );\n}\n","size_bytes":6857},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}